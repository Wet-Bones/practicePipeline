pipeline {
    agent any

    environment {
    	ARM_CLIENT_ID		= credentials('azure-client-id')
    	ARM_CLIENT_SECRET	= credentials('azure-client-secret')
    	ARM_SUBSCRIPTION_ID = credentials('azure-subscription-id')
    	ARM_TENANT_ID		= credentials('azure-tenant-id')
    	ACR_NAME			= credentials('acr-name')
    }
    
    stages {
    	stage('Debug Permissions') {
    	            steps {
    	                script {
    	                    sh 'whoami' // Log current user
    	                    sh 'ls -la /home/nathaniel' // Log directory contents
    	                    sh 'ls -la /home/nathaniel/practice_pipeline' // Log permissions
    	                }
    	            }
    	        }
		stage('Debug') {
		    steps {
		        script {
		            echo "ARM_CLIENT_ID: ${env.ARM_CLIENT_ID}"
		            echo "ARM_TENANT_ID: ${env.ARM_TENANT_ID}"
		            echo "ARM_SUBSCRIPTION_ID: ${env.ARM_SUBSCRIPTION_ID}"
		        }
		    }
		}
        stage('Terraform Init and Apply') {
            steps {
            	script{
	            		dir('/home/nathaniel/practice_pipeline/terraform') {
	            		            		sh 'terraform init'
	            		            	    sh 'terraform apply -auto-approve'
            		}
            	}
            }
        }
        stage('Run Ansible Playbook') {
            steps {
                sshagent(['87619e79-ebdd-42b3-a761-b77eff6b2992']) {
                    sh """
                        ansible-playbook -i /home/nathaniel/practice_pipeline/ansible/inventory.ini /home/nathaniel/practice_pipeline/ansible/playbook.yml --extra-vars '
                        azure_client_id=${ARM_CLIENT_ID}
                        azure_client_secret=${ARM_CLIENT_SECRET}
                        azure_tenant_id=${ARM_TENANT_ID}
                        azure_subscription_id=${ARM_SUBSCRIPTION_ID}
                        acr_name=${ACR_NAME}'
                    """
                }
            }
        }
        stage('Prepare Kubernetes Deployment') {
            steps {
                script {
                    sh "sed -i 's|PLACEHOLDER_IMAGE|${ACR_NAME}.azurecr.io/flask-app-image:latest|g' /home/nathaniel/practice_pipeline/manifests/deployment.yaml"
                }
            }
        }
        
        stage('Deploy to AKS via ArgoCD') {
            steps {
				// Login to Argo CD
                sh 'argocd login 135.224.240.154 --username admin --password  54Z20KwcnLgaoUpR --insecure'
            		
                sh 'argocd app sync flask-app --server 135.224.240.154 --insecure'
            }
        }
    }
}
